{
  "name": "test-workflow-force-tool-call",
  "nodes": [
    {
      "parameters": {
        "options": {
          "responseMode": "responseNodes"
        }
      },
      "id": "50b929b7-2954-4273-b7d9-275cb986ace7",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "position": [
        320,
        0
      ],
      "webhookId": "task-builder-chat-trigger",
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=INSTRUCTIONS: Before you can answer, you MUST first call the mcp__list_tools function to see what tools are available. Do not attempt to answer without calling this function first.\n\nUser request: {{ $json.chatInput }}\n\nRemember: Call mcp__list_tools NOW before proceeding.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are a function-calling agent that creates task plans.\n\nCRITICAL WORKFLOW:\nStep 1: You CANNOT answer without first calling mcp__list_tools\nStep 2: Wait for the tool response\nStep 3: Use the tool list to create your plan\nStep 4: Return ONLY this JSON (no other text):\n\n{\n  \"tasks\": [\n    {\n      \"task_id\": \"task_1\",\n      \"tool\": \"exact_tool_name_from_mcp_response\",\n      \"task_description\": \"what this does\",\n      \"params\": {},\n      \"dependencies\": []\n    }\n  ]\n}\n\nYou do not have knowledge of available tools until you call mcp__list_tools.\nIf you try to answer without calling the tool, you will fail.\nStart EVERY conversation by calling mcp__list_tools.",
          "maxIterations": 8,
          "returnIntermediateSteps": true
        }
      },
      "id": "a7eb74fd-12df-4a35-ae63-606b136c7503",
      "name": "Task Planner Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        608,
        0
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "model": "qwen2.5-coder:7b",
        "options": {
          "temperature": 0.2,
          "topP": 0.9,
          "repeatPenalty": 1.1,
          "keepAlive": "5m",
          "format": "json",
          "numPredict": 2000
        }
      },
      "id": "003fddb4-57ce-434e-9040-ecadefaa4eb9",
      "name": "Qwen2.5 Coder",
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "position": [
        544,
        224
      ],
      "typeVersion": 1,
      "credentials": {
        "ollamaApi": {
          "id": "USclDUsNN9z5K0Bb",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "endpointUrl": "http://172.17.0.1:6789/mcp",
        "serverTransport": "httpStreamable",
        "include": "selected",
        "includeTools": [
          "listTools"
        ],
        "options": {}
      },
      "id": "d79def49-7ccd-4bd3-8d03-db00f2873519",
      "name": "MCP List Tools",
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "position": [
        672,
        224
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"tasks\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"task_id\": {\"type\": \"string\"},\n          \"tool\": {\"type\": \"string\"},\n          \"task_description\": {\"type\": \"string\"},\n          \"params\": {\"type\": \"object\"},\n          \"dependencies\": {\n            \"type\": \"array\",\n            \"items\": {\"type\": \"string\"}\n          }\n        },\n        \"required\": [\"task_id\", \"tool\", \"task_description\", \"params\", \"dependencies\"]\n      }\n    }\n  },\n  \"required\": [\"tasks\"]\n}"
      },
      "id": "ab6fbcc9-9994-4a6e-b1f2-7d4087b0c2b2",
      "name": "Task Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "position": [
        800,
        224
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "jsCode": "// STRICT validator - fails if tool not called\nconst agentOutput = $input.first().json;\n\nconsole.log('Agent output:', JSON.stringify(agentOutput, null, 2));\n\n// Check intermediate steps for tool calls\nconst steps = agentOutput.intermediateSteps || [];\nconsole.log('Intermediate steps:', steps.length);\n\nlet toolCalled = false;\nlet toolResponse = null;\n\nfor (const step of steps) {\n  console.log('Step:', JSON.stringify(step, null, 2));\n  \n  const action = step.action || step[0];\n  const observation = step.observation || step[1];\n  \n  if (action && (action.tool === 'mcp__list_tools' || \n                 action.toolName === 'mcp__list_tools' ||\n                 (typeof action === 'string' && action.includes('mcp__list_tools')))) {\n    toolCalled = true;\n    toolResponse = observation;\n    console.log('‚úì Tool call detected!');\n    break;\n  }\n}\n\nif (!toolCalled) {\n  throw new Error('‚ùå VALIDATION FAILED: Agent did not call mcp__list_tools.\\n\\nThe agent MUST call the tool before responding.\\n\\nThis is likely because:\\n1. Model is hallucinating a response\\n2. Temperature is too high\\n3. Model is not following instructions\\n\\nTry: Use deepseek-r1:7b or llama3.1:8b instead');\n}\n\n// Validate output\nlet output = agentOutput.output;\n\nif (typeof output === 'string') {\n  const jsonMatch = output.match(/\\{[\\s\\S]*\\}/);\n  if (!jsonMatch) {\n    throw new Error('‚ùå No valid JSON in output');\n  }\n  output = JSON.parse(jsonMatch[0]);\n}\n\nif (!output.tasks || !Array.isArray(output.tasks)) {\n  throw new Error('‚ùå Output missing tasks array');\n}\n\nconsole.log('‚úÖ Validation passed');\n\nreturn {\n  json: {\n    success: true,\n    tool_called: true,\n    tool_response_preview: typeof toolResponse === 'string' ? toolResponse.substring(0, 200) : 'N/A',\n    output: output,\n    steps_count: steps.length\n  }\n};"
      },
      "id": "validator-strict",
      "name": "Strict Validator",
      "type": "n8n-nodes-base.code",
      "position": [
        808,
        0
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "message": "=‚úÖ Task Plan Generated\\n\\n```json\\n{{ JSON.stringify($json.output, null, 2) }}\\n```\\n\\nüìä Validation:\\n‚Ä¢ Tool called: {{ $json.tool_called ? '‚úì' : '‚úó' }}\\n‚Ä¢ Steps executed: {{ $json.steps_count }}\\n‚Ä¢ JSON valid: ‚úì",
        "waitUserReply": false,
        "options": {}
      },
      "id": "aaf3ffbf-9cdd-4b8e-a45c-4889f91a07b9",
      "name": "Respond to Chat",
      "type": "@n8n/n8n-nodes-langchain.chat",
      "position": [
        1008,
        0
      ],
      "typeVersion": 1
    }
  ],
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "Task Planner Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Task Planner Agent": {
      "main": [
        [
          {
            "node": "Strict Validator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Strict Validator": {
      "main": [
        [
          {
            "node": "Respond to Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Qwen2.5 Coder": {
      "ai_languageModel": [
        [
          {
            "node": "Task Planner Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "MCP List Tools": {
      "ai_tool": [
        [
          {
            "node": "Task Planner Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Task Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Task Planner Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  }
}