{
  "name": "task-builder-workflow",
  "nodes": [
    {
      "parameters": {
        "options": {
          "responseMode": "responseNodes"
        }
      },
      "id": "723b94af-dd90-42d5-a083-be7ffbca5217",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "position": [
        -4048,
        384
      ],
      "webhookId": "task-builder-chat-trigger",
      "typeVersion": 1.3,
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are a Task Planning AI Agent.\n\nCRITICAL RULE: You must ALWAYS call the listTools function first. You cannot guess what tools are available.\n\nYour ONLY job is:\n1. Call listTools({\"detailed\": true}) - DO THIS NOW\n2. Wait for the response with available tools\n3. Then create the task plan JSON using those tools\n\nYou will FAIL if you try to create a task plan without calling listTools first.\n\nAfter calling listTools and getting the response, return this JSON structure:\n{\n  \"tasks\": [\n    {\n      \"tool\": \"<exact_tool_name_from_listTools_response>\",\n      \"task_description\": \"<what this task does>\",\n      \"task_input\": {\n        \"<param_name>\": \"<param_value>\"\n      },\n      \"dependencies\": [],\n      \"task_id\": \"task_1\"\n    }\n  ]\n}\n\nIMPORTANT:\n- Start EVERY conversation by calling listTools\n- Use exact tool names from listTools response\n- task_input has the tool's required parameters\n- dependencies is an array (use [] if none)\n- Return only valid JSON, no markdown, no explanations",
          "maxIterations": 5,
          "returnIntermediateSteps": true
        }
      },
      "id": "18cd6d18-ccb4-46d7-a345-d27e46e8b225",
      "name": "Task Planner Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        -3760,
        240
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"tasks\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"tool\": {\n            \"type\": \"string\"\n          },\n          \"task_description\": {\n            \"type\": \"string\"\n          },\n          \"task_input\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"dependencies\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"default\": []\n          },\n          \"task_id\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\"tool\", \"task_description\", \"task_input\", \"task_id\"],\n        \"additionalProperties\": false\n      }\n    }\n  },\n  \"required\": [\"tasks\"],\n  \"additionalProperties\": false\n}"
      },
      "id": "1c9d26e7-cda4-438a-be2c-afe68adab9dd",
      "name": "Task List Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "position": [
        -3392,
        576
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "model": "Qwen2.5:latest",
        "options": {
          "temperature": 0.1,
          "format": "json"
        }
      },
      "id": "bd27a57c-44d1-4c49-b6a1-9309d3972bfe",
      "name": "Qwen2.5 Task Planner",
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "position": [
        -3824,
        464
      ],
      "typeVersion": 1,
      "credentials": {
        "ollamaApi": {
          "id": "5xLoLXEjNmerrDm4",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Extract tasks and prepare for dependency resolution\nconst tasks = $input.item.json.output.tasks;\n\n// Create a task registry with status tracking\nconst taskRegistry = {};\nconst pendingTasks = [];\nconst completedTasks = [];\n\n// Initialize all tasks\nfor (const task of tasks) {\n  taskRegistry[task.task_id] = {\n    ...task,\n    status: 'pending',\n    output: null,\n    dependencies: task.dependencies || []\n  };\n  pendingTasks.push(task.task_id);\n}\n\n// Find tasks that can be executed immediately (no dependencies)\nconst readyTasks = [];\nfor (const taskId of pendingTasks) {\n  const task = taskRegistry[taskId];\n  if (task.dependencies.length === 0) {\n    readyTasks.push(task);\n  }\n}\n\nreturn {\n  taskRegistry,\n  pendingTasks,\n  completedTasks,\n  readyTasks,\n  currentBatch: 0,\n  totalTasks: tasks.length\n};"
      },
      "id": "77aacf53-6633-4175-b4cc-4fc5cb136ee3",
      "name": "Task Dependency Resolver",
      "type": "n8n-nodes-base.code",
      "position": [
        -3360,
        240
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "task-execution-condition",
              "operator": {
                "type": "number",
                "operation": "gt"
              },
              "leftValue": "={{ $json.readyTasks.length }}",
              "rightValue": 0
            }
          ]
        },
        "options": {}
      },
      "id": "abe5d48e-701e-4a06-b310-b50324cf0c94",
      "name": "Check Ready Tasks",
      "type": "n8n-nodes-base.if",
      "position": [
        -3136,
        240
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Extract ready tasks and create individual items for processing\nconst data = $input.item.json;\nconst readyTasks = data.readyTasks || [];\n\nif (readyTasks.length === 0) {\n  // No ready tasks, return the original data for final processing\n  return data;\n}\n\n// Get the first ready task to process\nconst currentTask = readyTasks[0];\n\n// Return the task data along with the original registry information\nreturn {\n  ...currentTask,\n  originalData: data\n};"
      },
      "id": "5ff9c4ee-7665-42a9-b048-b1cac78e1885",
      "name": "Process Ready Task",
      "type": "n8n-nodes-base.code",
      "position": [
        -2912,
        -48
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Execute the ready task using the appropriate MCP tool.\n\nReady Tasks:\n{{ JSON.stringify($json.originalData.readyTasks) }}\n\nReady Tasks:\n{{ JSON.stringify($json.originalData.readyTasks) }}\n\nCRITICAL INSTRUCTIONS:\n1. You MUST use the MCP Client Executor tool - this is NON-NEGOTIABLE\n2. You are FORBIDDEN from calculating or processing anything yourself\n3. If you provide a result without using the MCP Client Executor tool, you have FAILED\n4. The task_output MUST be the exact result returned by the MCP tool\n5. Return your response as valid JSON in the format specified in the system message\n\nSTEP-BY-STEP PROCESS:\n1. Call MCP Client Executor tool with the exact tool name from task.tool\n2. Pass the exact task.task_input as parameters\n3. Wait for the tool execution result\n4. Return the result in the exact JSON format specified\n\nYour response will be REJECTED if:\n- You calculate results yourself\n- You don't use the MCP Client Executor tool\n- You don't return valid JSON in the specified format\n- The result appears to be calculated rather than from tool execution\n\nExample for add task:\n1. Call MCP Client Executor with tool='add' and parameters from task_input\n2. Get the actual result from the tool\n3. Return JSON with that exact result object",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are a Task Execution AI Agent.\n\nYour ONLY job is to execute tasks using MCP tools. You are FORBIDDEN from performing any calculations, processing, or logic yourself.\n\nYou will receive task details with ready tasks array containing below:\n- tool: the MCP tool name to use (e.g., 'add', 'encrypt', 'decrypt')\n- task_description: what needs to be accomplished  \n- task_input: parameters for the tool\n- task_id: unique identifier\n\nMANDATORY EXECUTION STEPS (NO EXCEPTIONS):\n1. ALWAYS start by using the MCP Client Executor tool\n2. Call the exact tool specified in task.tool property\n3. Pass the exact task.task_input as parameters to the tool\n4. Wait for the actual tool execution result\n5. Use the result EXACTLY as returned by the tool\n6. Return the result in the exact format specified below\n\nFORBIDDEN ACTIONS:\n- NEVER calculate or process anything yourself\n- NEVER provide results without using tools\n- NEVER assume what the result should be\n- NEVER shortcut the tool execution process\n- NEVER use your own knowledge to provide answers\n\nVALIDATION REQUIREMENTS:\n- Every response MUST include evidence of actual tool usage\n- The task_output MUST be the exact result from the MCP tool\n- If you cannot use the tool, report \"failure\" status with error details\n\nRETURN FORMAT (MUST be valid JSON):\n{\n  \"task_description\": \"[copy original task_description]\",\n  \"task_input\": {[copy original task_input object]},\n  \"task_tool\": \"[tool name that was used]\",\n  \"task_output\": {[EXACT result object from MCP tool - NOT your calculation]},\n  \"task_status\": \"success\",\n  \"task_id\": \"[copy original task_id]\"\n}\n\nCRITICAL: You MUST return valid JSON in the exact format above. Do not use any other formatting.\n\nREMEMBER: If you provide any result without actually using the MCP Client Executor tool, you have FAILED your purpose."
        }
      },
      "id": "52ea7b24-d363-4519-b652-bb1d548a615b",
      "name": "Task Executor Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        -2624,
        -128
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"task_description\": {\"type\": \"string\"},\n    \"task_input\": {\"type\": \"object\"},\n    \"task_tool\": {\"type\": \"string\"},\n    \"task_output\": {\"type\": \"object\"},\n    \"task_status\": {\"type\": \"string\", \"enum\": [\"success\", \"failure\"]},\n    \"task_id\": {\"type\": \"string\"}\n  },\n  \"required\": [\"task_description\", \"task_input\", \"task_tool\", \"task_output\", \"task_status\", \"task_id\"]\n}"
      },
      "id": "d6f64ea2-0610-4ffb-820b-d52c4ac7ebfe",
      "name": "Task Result Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "position": [
        -2416,
        112
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "model": "Qwen2.5:latest",
        "options": {
          "temperature": 0.1
        }
      },
      "id": "2f3a373d-f24a-4a21-b31e-c31f18b8ba51",
      "name": "Qwen2.5 Task Executor",
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "position": [
        -2688,
        112
      ],
      "typeVersion": 1,
      "credentials": {
        "ollamaApi": {
          "id": "5xLoLXEjNmerrDm4",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {},
      "id": "a5aa7e7a-798c-40ff-a22b-869b39db5354",
      "name": "Merge Task Results",
      "type": "n8n-nodes-base.merge",
      "position": [
        -2208,
        -48
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "jsCode": "// Update task registry with completed task result\nconst taskResult = $input.first().json.output || $input.first().json;\nconst executedTask = $input.last().json;\n\n// Get the original data (task registry info) from the merged inputs\nconst originalData = executedTask.originalData;\n\n// Update the task registry\nconst taskRegistry = { ...originalData.taskRegistry };\nconst completedTasks = [...originalData.completedTasks];\nconst pendingTasks = [...originalData.pendingTasks];\n\n// Mark current task as completed\nif (taskRegistry[taskResult.task_id]) {\n  taskRegistry[taskResult.task_id].status = taskResult.task_status;\n  taskRegistry[taskResult.task_id].output = taskResult.task_output;\n  \n  if (taskResult.task_status === 'success') {\n    completedTasks.push(taskResult.task_id);\n    // Remove from pending\n    const pendingIndex = pendingTasks.indexOf(taskResult.task_id);\n    if (pendingIndex > -1) {\n      pendingTasks.splice(pendingIndex, 1);\n    }\n  }\n}\n\n// Find newly ready tasks (dependencies now satisfied)\nconst readyTasks = [];\nfor (const taskId of pendingTasks) {\n  const task = taskRegistry[taskId];\n  if (task.status === 'pending') {\n    // Check if all dependencies are completed\n    const allDependenciesMet = task.dependencies.every(depId => \n      completedTasks.includes(depId) && \n      taskRegistry[depId].status === 'success'\n    );\n    \n    if (allDependenciesMet) {\n      // Inject dependency outputs into task input\n      const enrichedTask = { ...task };\n      for (const depId of task.dependencies) {\n        const depOutput = taskRegistry[depId].output;\n        // Extract the result from the MCP tool output format\n        if (depOutput && depOutput.result !== undefined) {\n          enrichedTask.task_input = { text: depOutput.result };\n        } else {\n          enrichedTask.task_input = depOutput;\n        }\n      }\n      readyTasks.push(enrichedTask);\n    }\n  }\n}\n\nreturn {\n  taskRegistry,\n  pendingTasks,\n  completedTasks,\n  readyTasks,\n  currentBatch: (originalData.currentBatch || 0) + 1,\n  totalTasks: originalData.totalTasks,\n  lastTaskResult: taskResult\n};"
      },
      "id": "7295d386-5fde-4f4d-bce4-55aee65a89c8",
      "name": "Update Task Registry",
      "type": "n8n-nodes-base.code",
      "position": [
        -1984,
        -48
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 1,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "more-tasks-condition",
              "operator": {
                "type": "number",
                "operation": "gt"
              },
              "leftValue": "={{ $json.pendingTasks.length }}",
              "rightValue": 0
            }
          ]
        },
        "options": {}
      },
      "id": "d8decd32-99b6-476a-9175-47cef329da8a",
      "name": "Check More Tasks",
      "type": "n8n-nodes-base.if",
      "position": [
        -1760,
        -48
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Collect all completed task results for final response generation\nconst taskRegistry = $input.item.json.taskRegistry;\nconst completedTasks = $input.item.json.completedTasks;\n\nconst taskResults = [];\nfor (const taskId of completedTasks) {\n  const task = taskRegistry[taskId];\n  if (task && task.status === 'success') {\n    taskResults.push({\n      task_description: task.task_description,\n      task_input: task.task_input,\n      task_tool: task.tool,\n      task_output: task.output,\n      task_status: task.status,\n      task_id: taskId\n    });\n  }\n}\n\nreturn {\n  taskResults,\n  totalTasksCompleted: completedTasks.length,\n  allTasksCompleted: true\n};"
      },
      "id": "3a505f72-a12e-4d29-999a-746276ea4fe4",
      "name": "Prepare Final Results",
      "type": "n8n-nodes-base.code",
      "position": [
        -1536,
        48
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=User Request: {{ $json.chatInput }}\n\nTask Execution Details: {{ JSON.stringify($json.taskResults) }}",
        "options": {
          "systemMessage": "You are a Response Synthesis AI Agent. Your role is to take all completed task results and create a comprehensive, coherent final response for the user.\n\nYou will receive an array of task results, each containing:\n- task_description: what the task accomplished\n- task_input: the input parameters used\n- task_tool: the tool that was used\n- task_output: the actual result/output\n- task_status: success/failure status\n- task_id: unique identifier\n\nYour job is to:\n1. Analyze all task results\n2. Synthesize the outputs into a coherent response\n3. Present the information in a user-friendly way\n4. Highlight key findings, results, or outcomes\n5. If there were any failed tasks, mention them appropriately\n\nPrepare final response summary."
        }
      },
      "id": "81e38d78-6970-4146-a80e-12e801dc39dd",
      "name": "Response Synthesis Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        -1056,
        304
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"final_response\": {\"type\": \"string\"},\n    \"task_summary\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"total_tasks\": {\"type\": \"number\"},\n        \"successful_tasks\": {\"type\": \"number\"},\n        \"failed_tasks\": {\"type\": \"number\"}\n      }\n    },\n    \"key_results\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"}\n    }\n  },\n  \"required\": [\"final_response\", \"task_summary\"]\n}"
      },
      "id": "9dc151f5-932c-4e7c-9a84-3a53c060eb0f",
      "name": "Final Response Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "position": [
        -784,
        608
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "model": "Qwen2.5:latest",
        "options": {}
      },
      "id": "c2a98692-5d77-4154-a01b-7b45c94ee43c",
      "name": "Qwen2.5 Response Synthesis",
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "position": [
        -1072,
        624
      ],
      "typeVersion": 1,
      "credentials": {
        "ollamaApi": {
          "id": "5xLoLXEjNmerrDm4",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "message": "={{ $json.output }}\n",
        "waitUserReply": false,
        "options": {}
      },
      "id": "20e9137f-f878-48aa-b69d-d22d933665a0",
      "name": "Respond to Chat",
      "type": "@n8n/n8n-nodes-langchain.chat",
      "position": [
        -608,
        304
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "path": "task-executor-mcp-endpoint"
      },
      "id": "e52cb271-05e9-44a8-9acc-75d08a32f39f",
      "name": "MCP Server Executor",
      "type": "@n8n/n8n-nodes-langchain.mcpTrigger",
      "position": [
        -4048,
        1024
      ],
      "webhookId": "task-executor-mcp-endpoint",
      "typeVersion": 2
    },
    {
      "parameters": {
        "description": "Get list of all available MCP tools for task planning",
        "workflowId": {
          "__rl": true,
          "mode": "list",
          "value": "aVdyMV0AxIk92VwD",
          "cachedResultUrl": "/workflow/aVdyMV0AxIk92VwD",
          "cachedResultName": "list-tool-service-trigger"
        },
        "workflowInputs": {
          "value": {},
          "mappingMode": "defineBelow"
        }
      },
      "id": "8e2d275c-de98-4fa6-ba76-3348f55e73c2",
      "name": "List Available Tools",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "position": [
        -4048,
        816
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "description": "Format final JSON response for task execution results",
        "workflowId": {
          "__rl": true,
          "mode": "manual",
          "value": "format-json-response-trigger"
        },
        "workflowInputs": {
          "value": {
            "task_id": "={{ $parameter.task_id }}",
            "task_tool": "={{ $parameter.task_tool }}",
            "task_input": "={{ $parameter.task_input }}",
            "task_output": "={{ $parameter.task_output }}",
            "task_status": "={{ $parameter.task_status }}",
            "task_description": "={{ $parameter.task_description }}"
          },
          "mappingMode": "defineBelow"
        }
      },
      "id": "441a5e53-d06d-4bde-a0db-6319ab58a5b9",
      "name": "Format Final JSON Response",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "position": [
        -4048,
        608
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {},
      "id": "55b693c3-e6cf-4113-834c-3c0f02e6f40e",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "position": [
        -1712,
        368
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "jsCode": "let finalResponse = {}\n\n// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  finalResponse = {...finalResponse, ...item.json }\n}\nreturn {...finalResponse};"
      },
      "id": "cbd1a77e-8577-4fbc-82df-abc8e9087915",
      "name": "Code in JavaScript",
      "type": "n8n-nodes-base.code",
      "position": [
        -1504,
        368
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "endpointUrl": "http://172.17.0.1:6789/mcp",
        "serverTransport": "httpStreamable",
        "include": "selected",
        "includeTools": [
          "listTools"
        ],
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1.1,
      "position": [
        -3584,
        512
      ],
      "id": "83be440f-2fc9-47e7-a07a-718811d629af",
      "name": "MCP List Tools Client"
    },
    {
      "parameters": {
        "endpointUrl": "http://172.17.0.1:6789/mcp",
        "serverTransport": "httpStreamable",
        "include": "except",
        "excludeTools": [
          "listTools"
        ],
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1.1,
      "position": [
        -2528,
        384
      ],
      "id": "802cd705-a423-490a-88c5-f152fb6ceb6d",
      "name": "MCP Available Tools Client"
    }
  ],
  "pinData": {},
  "connections": {
    "Merge": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check More Tasks": {
      "main": [
        [
          {
            "node": "Check Ready Tasks",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Final Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Task List Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Task Planner Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Check Ready Tasks": {
      "main": [
        [
          {
            "node": "Process Ready Task",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Final Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Response Synthesis Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Task Results": {
      "main": [
        [
          {
            "node": "Update Task Registry",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Ready Task": {
      "main": [
        [
          {
            "node": "Task Executor Agent",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Task Results",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Task Planner Agent": {
      "main": [
        [
          {
            "node": "Task Dependency Resolver",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Task Result Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Task Executor Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Task Executor Agent": {
      "main": [
        [
          {
            "node": "Merge Task Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Qwen2.5 Task Planner": {
      "ai_languageModel": [
        [
          {
            "node": "Task Planner Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Update Task Registry": {
      "main": [
        [
          {
            "node": "Check More Tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Final Results": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Qwen2.5 Task Executor": {
      "ai_languageModel": [
        [
          {
            "node": "Task Executor Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Response Synthesis Agent": {
      "main": [
        [
          {
            "node": "Respond to Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Task Dependency Resolver": {
      "main": [
        [
          {
            "node": "Check Ready Tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Qwen2.5 Response Synthesis": {
      "ai_languageModel": [
        [
          {
            "node": "Response Synthesis Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Task Planner Agent",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MCP List Tools Client": {
      "ai_tool": [
        [
          {
            "node": "Task Planner Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "MCP Available Tools Client": {
      "ai_tool": [
        [
          {
            "node": "Task Executor Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "8862abd8-e41d-4d9e-8764-af8b0d11c779",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "e48c4a814881b1418af800a3fbbed8290840cab10cff0b5b090957237a9c47f1"
  },
  "id": "1Bw7zYaRFydWVLEo",
  "tags": []
}