{
  "name": "Complete Base64 Pipeline - MCP Server",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "base64-pipeline",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "a1b2c3d4-e5f6-7g8h-9i0j-k1l2m3n4o5p6",
      "name": "Webhook Input",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [160, 400],
      "webhookId": "c3d4e5f6-g7h8-9i0j-1k2l-m3n4o5p6q7r8"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:9000/mcp/base64/encode",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "bodyParameters": {
          "parameters": [
            {
              "name": "data",
              "value": "={{ $json.body.text }}"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": false,
              "neverError": true
            }
          }
        }
      },
      "id": "b2c3d4e5-f6g7-8h9i-0j1k-l2m3n4o5p6q7",
      "name": "1. Encode Text",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [380, 400]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:9000/mcp/base64/validate",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "bodyParameters": {
          "parameters": [
            {
              "name": "data",
              "value": "={{ $json.data.encoded }}"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": false,
              "neverError": true
            }
          }
        }
      },
      "id": "c3d4e5f6-g7h8-9i0j-1k2l-m3n4o5p6q7r8",
      "name": "2. Validate Base64",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [600, 400]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.data.is_valid }}",
              "value2": true
            }
          ]
        }
      },
      "id": "d4e5f6g7-h8i9-0j1k-2l3m-n4o5p6q7r8s9",
      "name": "Is Valid Base64?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [820, 400]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:9000/mcp/base64/decode",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "bodyParameters": {
          "parameters": [
            {
              "name": "encoded",
              "value": "={{ $('1. Encode Text').item.json.data.encoded }}"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": false,
              "neverError": true
            }
          }
        }
      },
      "id": "e5f6g7h8-i9j0-k1l2-m3n4-o5p6q7r8s9t0",
      "name": "3. Decode Back",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1040, 300]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "original_text",
              "value": "={{ $('Webhook Input').item.json.body.text }}"
            },
            {
              "name": "encoded_text",
              "value": "={{ $('1. Encode Text').item.json.data.encoded }}"
            },
            {
              "name": "validation_result",
              "value": "={{ $('2. Validate Base64').item.json.data.is_valid }}"
            },
            {
              "name": "decoded_text",
              "value": "={{ $json.data.decoded }}"
            },
            {
              "name": "round_trip_success",
              "value": "={{ $('Webhook Input').item.json.body.text === $json.data.decoded }}"
            }
          ]
        },
        "options": {}
      },
      "id": "f6g7h8i9-j0k1-l2m3-n4o5-p6q7r8s9t0u1",
      "name": "4. Format Results",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [1260, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "g7h8i9j0-k1l2-m3n4-o5p6-q7r8s9t0u1v2",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1480, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"error\": \"Base64 validation failed\", \"encoded\": $('1. Encode Text').item.json.data.encoded, \"is_valid\": $json.data.is_valid } }}",
        "options": {
          "responseCode": 400
        }
      },
      "id": "h8i9j0k1-l2m3-n4o5-p6q7-r8s9t0u1v2w3",
      "name": "Validation Error",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1040, 500]
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook Input": {
      "main": [
        [
          {
            "node": "1. Encode Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1. Encode Text": {
      "main": [
        [
          {
            "node": "2. Validate Base64",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "2. Validate Base64": {
      "main": [
        [
          {
            "node": "Is Valid Base64?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Valid Base64?": {
      "main": [
        [
          {
            "node": "3. Decode Back",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Validation Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "3. Decode Back": {
      "main": [
        [
          {
            "node": "4. Format Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4. Format Results": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "34567890-12ab-cdef-3456-789012abcdef",
  "id": "09876543-fedc-ba09-8765-4321fedcba09",
  "meta": {
    "instanceId": "abc123def456ghi789jkl012mno345pqr678stu901vwx234yz"
  },
  "tags": [
    {
      "createdAt": "2025-10-06T00:00:00.000Z",
      "updatedAt": "2025-10-06T00:00:00.000Z",
      "id": "1",
      "name": "MCP"
    },
    {
      "createdAt": "2025-10-06T00:00:00.000Z",
      "updatedAt": "2025-10-06T00:00:00.000Z",
      "id": "2",
      "name": "Base64"
    },
    {
      "createdAt": "2025-10-06T00:00:00.000Z",
      "updatedAt": "2025-10-06T00:00:00.000Z",
      "id": "3",
      "name": "Pipeline"
    }
  ]
}